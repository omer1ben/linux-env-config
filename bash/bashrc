# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the follo:ing line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions

export TERM=xterm-256color

bind 'set bell-style none'

function mkcd {
  mkdir -p $1;
  cd $1;
}

  # enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	 test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	 alias ls='ls --color=auto'
	 alias dir='dir --color=auto'
	 alias vdir='vdir --color=auto'

	 alias grep='grep --color=auto'
	 alias fgrep='fgrep --color=auto'
	 alias egrep='egrep --color=auto'
fi

alias ll='ls -l'
alias la='ls -a'

function rc {
    if [ $1 == "vim" ]; then
        [ -f "${HOME}/.vim/vimrc" ] && vim "${HOME}/.vim/vimrc"
        return
    fi
    if [ $1 == "nvim" ]; then
        [ -f "${HOME}/.config/nvim/init.vim" ] && vim "${HOME}/.config/nvim/init.vim"
        return
    fi
    [ -f "${HOME}/.$1rc" ] && vim "${HOME}/.$1rc"
}


[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f ~/.git-completion.bash ] && source ~/.git-completion.bash

# add mpi to linker and path
export LD_LIBRARY_PATH=/opt/openmpi/lib/:$LD_LIBRARY_PATH
export PATH=/opt/openmpi/bin:$PATH
export FZF_DEFAULT_COMMAND='ag -g ""'



alias real_vim='/bin/vim'

alias vim='nvim'

# Vim-ag
function vimag() {
  vim -p $(ag -l $1 ./)
}

# Completion to make command
# complete -W "\`grep -oE '^[a-zA-Z0-9_.-]+:([^=]|$)' ?akefile | sed 's/[^a-zA-Z0-9_.-]*$//'\`" make

# GIT heart FZF
# -------------

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --height 50% "$@" --border
}

gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

gv() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

export PS1="\`
if [ \$? = 0 ]; then
    echo -e \"\[\033[38;5;51m\]\t\[$(tput sgr0)\] [\[$(tput sgr0)\]\[\033[38;5;46m\]\u\[$(tput sgr0)\]\[\033[38;5;9m\]@\[$(tput sgr0)\]\[\033[38;5;46m\]\h\[$(tput sgr0)\] \[$(tput sgr0)\]\[\033[38;5;46m\]\W\[$(tput sgr0)\]]\[$(tput sgr0)\]\[\033[38;5;46m\]\\$\[$(tput sgr0)\] \[$(tput sgr0)\]\";
else
    echo -e \"\[\033[38;5;51m\]\t\[$(tput sgr0)\] [\[$(tput sgr0)\]\[\033[38;5;46m\]\u\[$(tput sgr0)\]\[\033[38;5;196m\]@\[$(tput sgr0)\]\[\033[38;5;46m\]\h\[$(tput sgr0)\] \[$(tput sgr0)\]\[\033[38;5;46m\]\W\[$(tput sgr0)\]]\[$(tput sgr0)\]\[\033[38;5;46m\]\\$\[$(tput sgr0)\] \[$(tput sgr0)\]\";
fi
\`"


